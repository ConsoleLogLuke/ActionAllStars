package com.sdg.collections{	import com.sdg.events.MapCollectionEvent;	import flash.events.EventDispatcher;		public class AbstractMapCollection extends EventDispatcher	{		protected var data:Object;				/**		 * Returns whether the value exists.		 */		public function contains(value:*):Boolean		{			return keyOf(value) != null;		}		/**		 * Returns whether the key is found.		 */		public function containsKey(key:Object):Boolean		{			return data[key] != null;		}		/**		 * Returns the item associated with the specified key.		 */		public function get(key:Object):*		{			return data[key];		}		/**		 * Returns the key of the specified item.		 */		public function keyOf(value:*):Object		{			for (var o:Object in data)				if (data[o] == value) return o;						return null;		}			/**		 * Returns an array of the items in the collection.		 */		public function toArray():Array		{			var a:Array = [];						for (var o:Object in data) {				a.push(data[o]);			}						return a;		}				/**		 * Dispatches a MapCollectionEvent that describes how the collection changed.		 */		protected function collectionChanged(kind:String, location:Object = null, oldLocation:Object = null, items:Array = null):void		{			dispatchEvent(new MapCollectionEvent(MapCollectionEvent.COLLECTION_CHANGE, false, false, kind, location, oldLocation, items));		}				/**		 * Enumerates through the source and adds items to the map as key-value pairs		 */		protected function populate(source:Object):void		{			var addFunc:Function = IMapCollection(this).add;						if (source)			{				for (var o:Object in source) {					addFunc(source[o], o);				}			}		}	}}