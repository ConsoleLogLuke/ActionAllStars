package com.sdg.collections.iterators{	import com.sdg.collections.IIterator;	import com.sdg.collections.IMapCollection;		import flash.errors.IllegalOperationError;		public class MapIterator implements IIterator	{		private var _map:IMapCollection;		private var _keys:Array;		private var _index:int = -1;				/**		 * Returns the current key.		 */		public function get location():Object		{			return _keys[_index];		}				public function MapIterator(map:IMapCollection, keys:Array)		{			_map = map;			_keys = keys;		}			/**		 * Resets the iteration _index;		 */		public function reset():void		{			_index = -1;		}			/**		 * Returns whether there remains an item to iterate over.		 */		public function hasNext():Boolean		{			return (_index + 1) < _keys.length;		}		/**		 * Returns the next item.		 */		public function next():*		{			if (++_index >= _keys.length) throw new IllegalOperationError("The next location is out of bounds.");						return _map.get(_keys[_index]);		}			/**		 * Removes and returns the current item.		 */		public function remove():*		{			if (_index < 0 || _index >= _keys.length) throw new IllegalOperationError("The current location is out of bounds.");						return _map.remove(_keys[_index]);		}				/**		 * Removes and returns the next item.		 */		public function removeNext():*		{			if (++_index >= _keys.length) throw new IllegalOperationError("The next location is out of bounds.");						return _map.remove(_keys[_index]);		}	}}