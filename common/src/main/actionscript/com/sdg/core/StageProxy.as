package com.sdg.core{	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.utils.getDefinitionByName;			[Event(name="frameRateChange", type="flash.events.Event")]	public class StageProxy extends EventDispatcher	{  						public static const ENTER_FRAME_CHANGE:String = 'frameRateChange';		//HAN this is set at 12!?		private var _frameRate:Number = 16;		private var _stage:Stage;				private static var _instance:StageProxy;				public static function getInstance():StageProxy		{			if (_instance == null) _instance = new StageProxy();			return _instance;		}				public static function initialize(display:DisplayObject):void		{			StageProxy.getInstance().initialize(display.stage);		}				public function get frameRate():Number		{			return _frameRate;		}			public function set frameRate(value:Number):void		{			if (_stage)			{				_stage.frameRate = value;				checkStageFrameRate();			}			else				_frameRate = value;		}				public function get stage():Stage		{			return _stage;		}				public function StageProxy() 		{			if (_instance)				throw new Error("StageProxy is a singleton class. Use 'getInstance()' to access the instance.");						// Initialize with ApplicationGlobals.application if it exists.			try			{				var appGlobals:Object = getDefinitionByName("mx.core.ApplicationGlobals");				initialize(appGlobals.application);			}			catch (e:Error) {};		}				public function initialize(display:DisplayObject):void		{			if (_stage == null)			{				if (display.stage == null)					throw new ArgumentError("Argument 'display' [" + display + "] must be on the stage.");								_stage = display.stage;				_stage.addEventListener(Event.ENTER_FRAME, checkStageFrameRate, false, int.MAX_VALUE, true);				checkStageFrameRate();			}		}				override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void		{			if (_stage) _stage.addEventListener(type, forwardStageEvent, useCapture, 0, true);						super.addEventListener(type, listener, useCapture, priority, useWeakReference);		}				private function forwardStageEvent(event:Event):void		{			dispatchEvent(event);		}				private function checkStageFrameRate(event:Event = null):void		{			if (_frameRate != _stage.frameRate && _stage.frameRate < 1000)			{				_stage.frameRate=_frameRate;				//_frameRate = _stage.frameRate;				dispatchEvent(new Event(ENTER_FRAME_CHANGE));			}		}	}}