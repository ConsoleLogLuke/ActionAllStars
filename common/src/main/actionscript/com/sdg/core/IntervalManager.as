package com.sdg.core{	import com.sdg.core.IntervalType;	import com.sdg.events.IntervalEvent;	import com.sdg.utils.DelayTimer;	import com.sdg.utils.EnterFrameTimer;	import com.sdg.utils.ITimer;		import flash.utils.Dictionary;	import flash.utils.getTimer;		public class IntervalManager	{		private static const TIMER_CLASS_MAP:Object = { 0:EnterFrameTimer, 1:DelayTimer };				private static var _listenerKeys:Dictionary = new Dictionary();		private static var _repeatItems:Dictionary = new Dictionary();		private static var _timers:Object = {};				public static function addIntervalListener(listener:Function, intervalType:uint = 0, interval:Number = 0, repetitions:uint = 0):void		{			if (_listenerKeys[listener]) removeIntervalListener(listener);						var timerKey:String = intervalType + '_' + interval;			var timer:ITimer = _timers[timerKey];						if (!timer)			{				if (intervalType > 1) throw new ArgumentError("Argument 'intervalType' [" + intervalType + "] is not valid.");				var timerClass:Class = TIMER_CLASS_MAP[intervalType];								timer = new timerClass(interval);				timer.start();							_timers[timerKey] = timer;			}						_listenerKeys[listener] = timerKey;					timer.addEventListener(IntervalEvent.INTERVAL, listener);						if (repetitions > 0)			{				var repeatItem:RepeatItem = new RepeatItem(listener, repetitions);				_repeatItems[listener] = repeatItem;								timer.addEventListener(IntervalEvent.INTERVAL, repeatItem.updateRepeatCount);			}		}				public static function hasIntervalListener(listener:Function):Boolean		{			return _listenerKeys[listener] != null;		}				public static function removeIntervalListener(listener:Function):void		{			var timerKey:String = _listenerKeys[listener];						if (timerKey)			{				var timer:ITimer = _timers[timerKey];				var repeatItem:RepeatItem = _repeatItems[listener];								timer.removeEventListener(IntervalEvent.INTERVAL, listener);								if (repeatItem)				{					delete _repeatItems[listener];					timer.removeEventListener(IntervalEvent.INTERVAL, repeatItem.updateRepeatCount);				}								// Stop and remove the timer if it has no remaining listeners.				if (!timer.hasEventListener(IntervalEvent.INTERVAL))				{					delete _timers[timerKey];					timer.stop();				}								delete _listenerKeys[listener];			}		}	}}import com.sdg.core.IntervalManager;import flash.events.Event;class RepeatItem{	public var listener:Function;	public var repeatCount:int;		public function RepeatItem(listener:Function, repeatCount:int)	{		this.listener = listener;		this.repeatCount = repeatCount;	}		public function updateRepeatCount(event:Event):void	{		repeatCount--;				if (repeatCount < 1)		{			IntervalManager.removeIntervalListener(listener);		}	}}