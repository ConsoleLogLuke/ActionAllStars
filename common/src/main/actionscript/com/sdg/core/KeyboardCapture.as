package com.sdg.core{	import com.sdg.core.StageProxy;	import flash.display.InteractiveObject;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;	public class KeyboardCapture extends EventDispatcher	{		private var _captureKeys:Object = {};		private var _keysDown:Array = [];		private var _lastKeyDown:int = -1;		private var _target:InteractiveObject;				public function get numKeysDown():int		{			return _keysDown.length;		}				public function get target():InteractiveObject		{			return _target;		}				public function set target(value:InteractiveObject):void		{			if (_target)			{				_target.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);				_target.removeEventListener(KeyboardEvent.KEY_UP, onKeyUp);			}						_target = value;						if (_target)			{				_target.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, false, 0, true);				_target.addEventListener(KeyboardEvent.KEY_UP, onKeyUp, false, 0, true);			}		}			public function KeyboardCapture(target:InteractiveObject = null)		{			this.target = (target == null) ? StageProxy.getInstance().stage : target;		}			public function addKeyCode(keyCode:uint):void		{			_captureKeys[keyCode] = true;			_lastKeyDown = -1;		}			public function addKeyCodes(...keyCodes:Array):void		{			for (var i:int = 0; i < keyCodes.length; i++)			{				addKeyCode(keyCodes[i]);			}		}			public function removeKeyCode(keyCode:uint):void		{			delete _captureKeys[keyCode];			removeKeyDown(keyCode);		}			public function removeKeyCodes(...keyCodes:Array):void		{			for (var i:int = 0; i < keyCodes.length; i++)			{				removeKeyCode(keyCodes[i]);			}		}			public function removeAllKeyCodes():void		{			_captureKeys = {};			_keysDown = [];		}				public function getKeysDown():Array		{			return _keysDown.slice();		}			public function isDown(keyCode:uint):Boolean		{			for (var i:int = 0; i < _keysDown.length; i++)				if (_keysDown[i] == keyCode) return true;			return false;		}			private function onKeyDown(event:KeyboardEvent):void		{			var keyCode:uint = event.keyCode;					if (keyCode != _lastKeyDown && _captureKeys[keyCode])			{				_lastKeyDown = keyCode;				_keysDown.unshift(keyCode);							dispatchEvent(event);			}		}			private function onKeyUp(event:KeyboardEvent):void		{			var keyCode:uint = event.keyCode;					if (_captureKeys[keyCode] && removeKeyDown(keyCode))			{				dispatchEvent(event);			}		}			private function removeKeyDown(keyCode:uint):Boolean		{			for (var i:int = 0; i < _keysDown.length; i++)			{				if (_keysDown[i] == keyCode)				{					_keysDown.splice(i, 1);					if (keyCode == _lastKeyDown) _lastKeyDown = -1;					return true;				}			}					return false;		}	}}