package com.sdg.ext{	import com.adobe.crypto.MD5;	import com.adobe.utils.StringUtil;	import flash.events.IOErrorEvent;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.SecurityErrorEvent;	import flash.external.ExternalInterface;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;		[Event(name="gameResult", type="com.sdg.events.SDGExtEvent")]	[Event(name="gameResultError", type="com.sdg.events.SDGExtEvent")]	[Event(name="gameAttributes", type="com.sdg.events.SDGExtEvent")]	[Event(name="gameAttributesError", type="com.sdg.events.SDGExtEvent")]		/**	 * The SDGExtUtil class provides all necessary means	 * for communicating with the host environment.	 */	public class SDGExtUtil extends EventDispatcher	{		private static const MD5_SALT:String = "ivGf7Do4ixkeE";				private static var _instance:SDGExtUtil;		private static var _singletonEnforcer:Object = {};				private var _sdgApp:ISDGApp;		private var _initParams:Object = {};				/**		 * Returns the single SDGExtUtil instance.		 * 		 * @return The SDGExtUtil instance.		 */		public static function getInstance():SDGExtUtil		{			if (_instance == null) _instance = new SDGExtUtil(_singletonEnforcer);			return _instance;		}				/**		 * Constructor, must not be called directly.		 *		 * @param enforcer The singleton enforcer object used to ensure this class is only instantiated once.		 * @throws Error If the constructor is called directly.		 */		public function SDGExtUtil(enforcer:Object)		{			if (enforcer !== _singletonEnforcer)				throw new Error("SDGExtUtil is a singleton class. Use 'getInstance()' to access the instance.")							if (ExternalInterface.available)			{				addExternalCallback("getState");				addExternalCallback("pause");				addExternalCallback("resume");				addExternalCallback("destroy");			}		}				/**		 * Registers the object for external method invokations.		 *		 * @param sdgApp The ISDGApp instance that gives the host environment access		 * to the game's exposed methods.		 */		public function registerSDGApp(sdgApp:ISDGApp):void		{			_sdgApp = sdgApp;		}				/**		 * Sets initialization parameters that are required for remote requests.		 *		 * @param initParams The object containing initialization parameters. This object		 * should be a reference to the LoaderInfo.parameters property of the document class.		 */		public function setInitParams(parameters:Object):void		{			if (!parameters.initParams || !parameters.hashCode)				throw new Error("Missing initialization parameters.");						var paramsObj:Object = {};			var paramsStr:String = '';			var paramsAr:Array = parameters.initParams.split(',');						for (var i:int = 0; i < paramsAr.length; i++)			{				var paramAr:Array = paramsAr[i].split('|');				paramsStr += paramAr[1];				paramsObj[paramAr[0]] = paramAr[1];			}						if (!validateHashCode(paramsStr, parameters.hashCode))				throw new Error("Invalid initialization parameters.");						_initParams = paramsObj;		}				/**		 * Invoke when the user indicates the desire to return to the host environment.		 */		public function closeAndReturn():void		{			callExternal('closeAndReturn');		}				/**		 * Should be invoked when the application has finished		 * loading, and the game UI is ready for user input. 		 */		public function loadComplete():void		{			callExternal('loadComplete');		}				/**		 * Makes a remote request for the given attributeSetId.		 *		 * @param attributeSetId		 * @return The URLRequest used to make the remote request.		 * @throws Error If the 'gameAttributesURL' initialization parameter is undefined.		 */		public function getGameAttributes(attributeSetId:uint):URLRequest		{			var request:URLRequest = getGameAttributesURLRequest(attributeSetId);			loadRequest(request, SDGExtEvent.GAME_ATTRIBUTES);			return request;		}				/**		 * Posts the GameResult object to the server.		 *		 * @param result The GameResult value object.		 * @return The URLRequest used to make the remote request.		 * @throws Error If the 'gameResultURL' initialization parameter is undefined.		 * @throws Error If a custom attribute is not a String or Number.		 */		public function sendGameResult(result:GameResult):URLRequest		{			var request:URLRequest = getGameResultURLRequest(result);			loadRequest(request, SDGExtEvent.GAME_RESULT);			return request;		}				//--------------------------------------------------------------------------		//		//  Validation methods		//		//--------------------------------------------------------------------------		private function validateResponse(data:XML):Boolean		{			var hashCode:String = data.@hashCode.toString();						if (hashCode == '') return true;						return validateHashCode(data.children().toString(), hashCode);		}				private function validateHashCode(str:String, hashCode:String):Boolean		{			return generateChecksum(str) == hashCode;		}				private function generateChecksum(str:String):String		{			var stripStr:String = StringUtil.remove(StringUtil.remove(str, ' '), '\n');			return MD5.hash(stripStr + MD5_SALT);		}				//--------------------------------------------------------------------------		//		//  Request methods		//		//--------------------------------------------------------------------------				private function getGameAttributesURLRequest(attributeSetId:uint):URLRequest		{			if (!_initParams.gameAttributesURL) throw new Error("Initialization parameter 'gameAttributesURL' must be defined.");						var request:URLRequest = new URLRequest();			request.url = _initParams.gameAttributesURL;						var data:URLVariables = new URLVariables();						data.gameId = _initParams.gameId;			data.avatarId = _initParams.avatarId;			data.attributeSetId = attributeSetId;			data.hashCode = generateChecksum(String(data.gameId) + String(data.avatarId) + String(data.attributeSetId));						request.data = data;						return request;		}				private function getGameResultURLRequest(result:GameResult):URLRequest		{			if (!_initParams.gameResultURL) throw new Error("Initialization parameter 'gameResultURL' must be defined.");						var request:URLRequest = new URLRequest();			request.url = _initParams.gameResultURL;						var data:XML = 			<GameResult>				<gameId>{_initParams.gameId}</gameId>				<avatarId>{_initParams.avatarId}</avatarId>			</GameResult>;			 			if (!isNaN(result.score)) data.appendChild(<score>{result.score}</score>);						if (result.startDate)			{				data.appendChild(<startDate>{encodeUTCDate(result.startDate)}</startDate>);				data.appendChild(<startTime>{encodeUTCTime(result.startDate)}</startTime>);			}						if (result.endDate)			{				data.appendChild(<endDate>{encodeUTCDate(result.endDate)}</endDate>);				data.appendChild(<endTime>{encodeUTCTime(result.endDate)}</endTime>);			}						var date:Date = new Date();						data.appendChild(<submissionDate>{encodeUTCDate(date)}</submissionDate>);			data.appendChild(<submissionTime>{encodeUTCTime(date)}</submissionTime>);						if (result.winCondition) data.appendChild(<winCondition>{result.winCondition}</winCondition>);			if (result.attributes) data.appendChild(encodeGameAttributes(result.attributes));						data.@hashCode = generateChecksum(data.children().toString());						request.data = data.toXMLString();			request.method = URLRequestMethod.POST;						return request;		}				private function loadRequest(request:URLRequest, requestType:String):void		{			var loader:URLLoader = new URLLoader();						var errorHandler:Function = function(event:ErrorEvent):void			{ 				dispatchRequestError(requestType, null, event.text);			}						var completeHandler:Function = function(event:Event):void			{ 				handleRequestComplete(requestType, event);			}						loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);			loader.addEventListener(Event.COMPLETE, completeHandler);			loader.load(request);		}				private function dispatchRequestError(requestType:String, data:Object, text:String):void		{			dispatchEvent(new SDGExtEvent(requestType + 'Error', data, text));		}				private function handleRequestComplete(requestType:String, event:Event):void		{			var result:XML = XML(event.target.data);						if (result.@status == "1")			{				if (validateResponse(result))					dispatchEvent(new SDGExtEvent(requestType, result));				else					dispatchRequestError(requestType, result, "Error processing '" + requestType + "' response.");			}			else			{				dispatchRequestError(requestType, event.target.data, "Invalid response status.");			}		}				//--------------------------------------------------------------------------		//		//  Encode methods		//		//--------------------------------------------------------------------------				private function encodeGameAttributes(atts:Object):XML		{			var data:XML = <attributes></attributes>;						for (var name:String in atts)			{				var value:Object = atts[name];								if (value != null)				{					if ((!(value is String) && !(value is Number)))						throw new Error("Attribute '" + name + "' " + value + " must be a String or Number.");											data.appendChild(<{name}>{atts[name]}</{name}>);				}			}						return data;		}				private function encodeUTCDate(date:Date):String		{			if (date)				return date.getUTCMonth() + '-' + date.getUTCDate() + '-' + date.getUTCFullYear();			else				return '';		}				private function encodeUTCTime(date:Date):String		{			if (date)				return date.getUTCHours() + ':' + date.getUTCMinutes() + ':' + date.getUTCSeconds();			else				return '';		}				//--------------------------------------------------------------------------		//		//  ExternalInterface methods		//		//--------------------------------------------------------------------------				private function addExternalCallback(methodName:String):void		{			var handler:Function = function(...args:Array):* { return handleExternal(methodName, args); }			ExternalInterface.addCallback("SDG_" + methodName, handler);		}				private function handleExternal(methodName:String, args:Array):*		{			if (_sdgApp) return _sdgApp[methodName].apply(this, args);		}				private function callExternal(methodName:String, ...args:Array):void		{			if (ExternalInterface.available)				ExternalInterface.call.apply(this, ["SDG_" + methodName].concat(args));		}	}}