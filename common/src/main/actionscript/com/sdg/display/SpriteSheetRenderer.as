package com.sdg.display{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Point;		/**	 * The SpriteSheetRenderer class defines a Bitmap that 	 * renders individual SpriteSheet cells. Use renderSprite()	 * to change the current visible cell.	 */	public class SpriteSheetRenderer extends Bitmap implements ISpriteRenderer	{			private static const NULL_BITMAP_DATA:BitmapData = new BitmapData(1, 1, true, 0);		private static const NULL_SPRITE_SHEET:SpriteSheet = new SpriteSheet();		private static const UNIT_POINT:Point = new Point();				private var _bitmapData:BitmapData = NULL_BITMAP_DATA;		private var _spriteSheet:SpriteSheet;		private var _currentSpriteIndex:uint;		private var _isDestroy:Boolean;		private var _privateBitmapData:BitmapData;				public function destroy():void		{			// Make sure we only destroy once.			if (_isDestroy == true) return;			_isDestroy = true;						// Handle clean up.			//if (_privateBitmapData != null) _privateBitmapData.dispose();			//_privateBitmapData = null;			//_bitmapData = NULL_BITMAP_DATA;						if (_spriteSheet != null) _spriteSheet.destroy();			_spriteSheet = null;		}				/**		 * The SpriteSheet rendering source. When spriteSheet is set, 		 * the bitmapData property is resized to the SpriteSheet cell size.		 */		public function get spriteSheet():SpriteSheet		{			return (_spriteSheet == NULL_SPRITE_SHEET) ? null : _spriteSheet;		}				public function set spriteSheet(value:SpriteSheet):void		{			if (value)			{				_spriteSheet = value;				_privateBitmapData = new BitmapData(_spriteSheet.spriteWidth, _spriteSheet.spriteHeight, _spriteSheet.source.transparent, 0);				super.bitmapData = _bitmapData = _privateBitmapData;			}			else			{				_spriteSheet = NULL_SPRITE_SHEET;			}							renderSprite(_currentSpriteIndex);		}				override public function get bitmapData():BitmapData		{			return (_bitmapData == NULL_BITMAP_DATA) ? null : _bitmapData;		}				override public function set bitmapData(value:BitmapData):void		{			_bitmapData = (value == null) ? NULL_BITMAP_DATA : value;			super.bitmapData = value;		}				/**		 * Constructor.		 * 		 * @param spriteSheet The SpriteSheet rendering source.		 */		public function SpriteSheetRenderer(spriteSheet:SpriteSheet = null)		{			if (spriteSheet) this.spriteSheet = spriteSheet;			else _spriteSheet = NULL_SPRITE_SHEET;		}				/**		 * Renders a single SpriteSheet cell at the specified index.		 *		 * @param index The location of the SpriteSheet cell.		 */		public function renderSprite(index:int):void		{			// Copy the pixels of the frame that "index" corresponds to.			_spriteSheet.copySprite(index, _bitmapData, UNIT_POINT);			_currentSpriteIndex = index;		}				public function get currentSpriteIndex():int		{			return _currentSpriteIndex;		}    }}