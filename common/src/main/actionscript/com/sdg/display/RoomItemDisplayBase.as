package com.sdg.display{	import com.sdg.display.render.RenderData;	import com.sdg.display.render.RenderObject;	import com.sdg.events.RoomItemDisplayEvent;	import com.sdg.geom.ColorMatrix;	import com.sdg.model.ItemResolveStatus;	import com.sdg.model.ModelLocator;	import com.sdg.model.SdgItem;	import com.sdg.net.QuickLoader;	import com.sdg.sim.render.SimRenderObject;	import com.sdg.util.AssetUtil;	import com.sdg.utils.BindingUtil;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.ColorMatrixFilter;	import flash.filters.GlowFilter;		import mx.binding.utils.ChangeWatcher;	public class RoomItemDisplayBase extends Sprite 	{		protected static const SELECTED_FILTERS:Array = [new GlowFilter(0xFFFFFF, .75, 6, 6, 4)];		protected static const INVALID_FILTERS:Array = [new ColorMatrixFilter(ColorMatrix.tint(0xFF0000, .65, 50))];						private var _changeInstance:ChangeWatcher;		private var _item:SdgItem;		protected var _renderItem:SimRenderObject;		protected var _itemResolveStatus:uint;		protected var _resolveItemIcon:Sprite;		private var _isDestroy:Boolean;		private var _resolveIconUrl:String;				public function RoomItemDisplayBase(item:SdgItem)		{			_item = item;			_resolveIconUrl = '';						_renderItem = new SimRenderObject(this);						addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);						// Bind to version property so that we load resources when the version changes.			_changeInstance = BindingUtil.bindSetter(load, _item, "version", false, true, false);		}				////////////////////		// INSTANCE METHODS		////////////////////				public function activate():void		{					}				public function deactivate():void		{					}		// remove resources attached to this object		public function destroy():void		{			// Make sure we only destroy once.			if (_isDestroy == true) return;			_isDestroy = true;						//			// IMPORTANT			//			// system Avatar should not have his assets destroyed			// if he is destroyed the system avatar becomes invisible after leaving private room editor 			if (item.avatarId == ModelLocator.getInstance().user.avatarId) return;						removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			removeEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);	  		_changeInstance.unwatch();		}				public function load():void		{					}				public function showUIState(state:int):void		{			var filters:Array = [];						if (state & RoomItemUIFlags.INVALID) filters = filters.concat(INVALID_FILTERS);			if (state & RoomItemUIFlags.SELECTED) filters = filters.concat(SELECTED_FILTERS);						this.filters = filters;		}				protected function setResolveIconUrl(url:String):void		{			if (url == _resolveIconUrl) return;			_resolveIconUrl = url;						var icon:QuickLoader;			if (_resolveIconUrl.length < 1)			{				// The url is emoty so lets just hide the resolve icon.				if (_resolveItemIcon != null) _resolveItemIcon.visible = false;			}			else			{				// Lets load the new resolve icon and remove the previous if necesary.								// Remove previous resolve icon.				if (_resolveItemIcon != null)				{					removeChild(_resolveItemIcon);				}								// Load new resolve icon.				_resolveItemIcon = new Sprite();				icon = new QuickLoader(url, onIconComplete);				_resolveItemIcon.mouseChildren = false;				_resolveItemIcon.mouseEnabled = false;			}						function onIconComplete():void			{				// Add resolve icon to display.				_resolveItemIcon.addChild(icon);				// Position icon.				positionResolveIcon();								addChild(_resolveItemIcon);			}		}				protected function positionResolveIcon():void		{			if (!_resolveItemIcon) return;			_resolveItemIcon.x = hitArea.x + hitArea.width / 2 - _resolveItemIcon.width / 2;			_resolveItemIcon.y = hitArea.y - _resolveItemIcon.height;		}				////////////////////		// GET/SET METHODS		////////////////////				public function get item():SdgItem		{			return _item;		}				public function get renderItem():RenderObject		{			return _renderItem;		}				public function get itemResolveStatus():uint		{			return _itemResolveStatus;		}		public function set itemResolveStatus(value:uint):void		{			_itemResolveStatus = value;						// Hanlde the resolve status.			switch (_itemResolveStatus)			{				case (ItemResolveStatus.MISSION_LAUNCH) :					setResolveIconUrl(AssetUtil.GetGameAssetUrl(99, 'exclamation_yellow.swf'));					break;				case (ItemResolveStatus.MISSION_RESOLVE) :					setResolveIconUrl(AssetUtil.GetGameAssetUrl(99, 'exclamation_green.swf'));					break;				case (ItemResolveStatus.ZOMBIE_CURE) :					setResolveIconUrl(AssetUtil.GetGameAssetUrl(99, 'zombie_charm.swf'));					break;				case (ItemResolveStatus.TURKEY_HUNT) :					setResolveIconUrl(AssetUtil.GetGameAssetUrl(99, 'turkey_football.swf'));					break;				default :					setResolveIconUrl('');					break;			}		}				////////////////////		// EVENT HANDLERS		////////////////////				protected function addedToStageHandler(event:Event):void		{			activate();		}				protected function removedFromStageHandler(event:Event):void		{			deactivate();		}    }}