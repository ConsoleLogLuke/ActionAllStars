package com.sdg.display{		import com.sdg.utils.Constants;		import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;		/**	 * The SpriteSheet class defines a grid of equal-size sprite cells	 * present on a single BitmapData instance.	 */    public class SpriteSheet	{		private var _source:BitmapData;		private var _spriteWidth:uint;		private var _spriteHeight:uint;		private var _cols:uint;		private var _layerId:uint;				private static const COPY_RECT:Rectangle = new Rectangle();		private static const NULL_BITMAP_DATA:BitmapData = new BitmapData(1, 1, true, 0);				public function destroy():void		{			// Handle clean up.			//_source = NULL_BITMAP_DATA;		}				/* The max number of sprites. */		public function get numSprites():uint		{			return _spriteWidth * _spriteHeight;		}				/* The BitmapData containing all sprites, arranged on a grid. */		public function get source():BitmapData		{			return _source;		}		//		public function releaseBitmapData():void	// test D jma//		{//			_source = null;//		}				public function set source(value:BitmapData):void		{			_source = (value == null) ? NULL_BITMAP_DATA : value;			computeColumns();		}				/* The width of each sprite. */		public function get spriteWidth():uint		{			return _spriteWidth;		}				public function set spriteWidth(value:uint):void		{			_spriteWidth = value;			computeColumns();		}				/* The height of each sprite. */		public function get spriteHeight():uint		{			return _spriteHeight;		}				public function set spriteHeight(value:uint):void		{			_spriteHeight = value;		}				/* The width of the source. */		public function get width():uint		{			return _source.width;		}				/* The height of the source. */		public function get height():uint		{			return _source.height;		}				public function get layerId():uint		{			return _layerId;		}				/**		 * Constructor.		 * 		 * @param spriteWidth The width of each sprite cell.		 * @param spriteHeight The height of each sprite cell.		 * @param source The BitmapData instance containing all sprites, arranged on a grid.		 */		public function SpriteSheet(spriteWidth:uint = 1, spriteHeight:uint = 1, source:BitmapData = null, layerId:uint = 0)		{			_spriteWidth = spriteWidth;			_spriteHeight = spriteHeight;			_layerId = layerId;			this.source = source;		}				/**		 * Copies the sprite content at the specified index to the target.		 * 		 * @param index The location of the sprite cell.		 * @param target The BitmapData copy destination.		 */		public function copySprite(index:uint, target:BitmapData, destPoint:Point, alphaBitmap:BitmapData = null, alphaPoint:Point = null, mergeAlpha:Boolean = false):void		{			if (_source == null) return;			getCopyRect(index, COPY_RECT);			target.copyPixels(_source, COPY_RECT, destPoint, alphaBitmap, alphaPoint, mergeAlpha);		}				/**		 * Merges the sprite content at the specified index with the target.		 * 		 * @param index The location of the sprite cell.		 * @param target The BitmapData copy destination.		 */		public function mergeSprite(index:uint, target:BitmapData, destPoint:Point):void		{			getCopyRect(index, COPY_RECT);			target.copyPixels(_source, COPY_RECT, destPoint, _source, new Point(COPY_RECT.x, COPY_RECT.y), true);		}				/**		 * Returns the sprite content at the specified index.		 * 		 * @param index The location of the sprite cell.		 * @return The sprite content.		 */		public function getSprite(index:uint):BitmapData	    {	    	var offsetPoint:Point = new Point();	    	var bmp:BitmapData = new BitmapData(_spriteWidth, _spriteHeight, true, 0);							copySprite(index, bmp, offsetPoint);			return bmp;		}				protected function getCopyRect(index:uint, rect:Rectangle):void		{			rect.x = (index % _cols) * _spriteWidth;			rect.y = ((index / _cols) << 0) * _spriteHeight;			rect.width = _spriteWidth;			rect.height = _spriteHeight;		}				protected function computeColumns():void		{			_cols = _spriteWidth > 0 ? (_source.width / _spriteWidth) << 0 : 1;		}    }}