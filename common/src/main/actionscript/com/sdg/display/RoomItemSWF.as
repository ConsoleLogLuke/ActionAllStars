package com.sdg.display{	import com.sdg.business.resource.IRemoteResource;	import com.sdg.business.resource.SdgResourceLocator;	import com.sdg.core.IProgressInfo;	import com.sdg.events.RoomItemDisplayEvent;	import com.sdg.model.SdgItem;		import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		public class RoomItemSWF extends RoomItemDisplayBase implements IRoomItemDisplay	{		protected var _content:DisplayObject;		protected var resource:IRemoteResource;		private var _orientation:uint;		protected var _floorMarker:DisplayObject;				public function RoomItemSWF(item:SdgItem)		{			_orientation = 0;						buttonMode = true;						resource = SdgResourceLocator.getInstance().getDoodadSWF(item.itemId);			resource.addEventListener(Event.COMPLETE, loadCompleteHandler);						super(item);		}				////////////////////		// INSTANCE METHODS		////////////////////				override public function activate():void		{		}				override public function deactivate():void		{		}				public function getImageRect(update:Boolean = false):Rectangle		{			return getRect(this);		}				override public function load():void		{			resource.reset();			resource.load();		}				public function playAnimation(name:String):void		{		}				private function setContent(value:DisplayObject):void		{			// Remove previous content.			if (_content)			{				_content.removeEventListener(MouseEvent.CLICK, mouseClickHandler);				removeChild(_content);			}						_content = value;			_content.addEventListener(MouseEvent.CLICK, mouseClickHandler);						// Try to pass orientation to the swf.			try			{				Object(_content).orientation = _orientation;			}			catch (e:Error)			{				// Could not pass orientation to the swf.			}						addChild(_content);						dispatchEvent(new RoomItemDisplayEvent(RoomItemDisplayEvent.CONTENT, this));		}				////////////////////		// GET/SET METHODS		////////////////////				public function get orientation():uint		{			return _orientation;		}				public function set orientation(value:uint):void		{			// Try to pass the orientation value to the swf itself.			_orientation = value;			if (_content == null) return;			var swf:Object = _content as Object;			if (swf.orientation != null)			{				swf.orientation = _orientation;			}		}				public function get progressInfo():IProgressInfo		{			return resource;		}				override public function get mouseEnabled():Boolean		{			return super.mouseEnabled;		}				override public function set mouseEnabled(value:Boolean):void		{			super.mouseEnabled = super.mouseChildren = value;		}				public function get content():DisplayObject		{			return _content;		}				public function set floorMarker(value:DisplayObject):void		{			if (value == _floorMarker) return;						// Remove previous floor marker.			if (_floorMarker != null)			{				removeChild(_floorMarker);			}						// Set new floor marker.			_floorMarker = value;						if (_floorMarker == null) return;						// Add to display.			addChildAt(_floorMarker, 0);						// Position the new floor marker			_floorMarker.x = _renderItem.originX;			_floorMarker.y = _renderItem.originY;		}				////////////////////		// EVENT HANDLERS		////////////////////				private function mouseClickHandler(event:MouseEvent):void		{			event.stopImmediatePropagation();			parent.dispatchEvent(event);		}				protected function loadCompleteHandler(event:Event):void		{			setContent(DisplayObject(resource.content));						// If there is a floor marker,			// Update it's position.			if (_floorMarker != null)			{				_floorMarker.x = _renderItem.originX;				_floorMarker.y = _renderItem.originY;			}		}	}}