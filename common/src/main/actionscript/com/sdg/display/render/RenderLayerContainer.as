package com.sdg.display.render{		import com.sdg.collections.QuickList;	import com.sdg.collections.QuickMap;	import com.sdg.sim.core.SimData;		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Matrix;		public class RenderLayerContainer extends Sprite	{		protected var renderLayers:QuickList = new QuickList();				public function RenderLayerContainer()		{			mouseEnabled = false;			startRendering();		}				public function addLayer(layer:RenderLayer):void		{			if (renderLayers.contains(layer))				throw new ArgumentError("Argument 'layer' [" + layer + "] is already a child of this container.");			renderLayers.push(layer);			layer.setContainer(this);		}				public function insertLayer(index:uint, layer:RenderLayer):void		{			if (renderLayers.contains(layer))				throw new ArgumentError("Argument 'layer' [" + layer + "] is already a child of this container.");						/*if (index > renderLayers.length)				throw new ArgumentError("Argument 'index' [" + index + "] is out of range.");*/							renderLayers.insert(index, layer);			layer.setContainer(this);		}				public function getLayer(index:uint):RenderLayer		{			return renderLayers[index];		}				public function getLayerById(id:Object):RenderLayer		{			for each (var layer:RenderLayer in renderLayers)				if (layer.id == id) return layer;							return null;		}				public function getLayerContaining(item:RenderObject):RenderLayer		{			for each (var layer:RenderLayer in renderLayers)				if (layer.contains(item)) return layer;						return null;		}				public function getLayerUnderPoint(x:Number, y:Number):RenderLayer		{			var i:int = renderLayers.length;						while (--i > -1)			{				var layer:RenderLayer = renderLayers[i];								if (layer.solid && layer.containsGlobal(x, y))					return layer;			}						return null;		}				public function removeLayer(layer:RenderLayer):void		{			removeLayerAt(renderLayers.indexOf(layer));		}				public function removeLayerAt(index:uint):void		{			var layer:RenderLayer = renderLayers.remove(index);			if (layer) layer.setContainer(null);		}				public function removeAllLayers():void		{			for each (var layer:RenderLayer in renderLayers)				layer.setContainer(null);						renderLayers.length = 0;		}				public function startRendering():void		{			addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				public function stopRendering():void		{			removeEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				public function update():void		{			var baseIndex:int = 0;			var layer:RenderLayer;			var l:int = renderLayers.length;						for (var i:int = 0; i < l; i++)			{				layer = renderLayers[i];				layer.update(baseIndex);				baseIndex += layer.numItems;			}		}				protected function enterFrameHandler(event:Event):void		{			update();		}	}}