package com.sdg.sim.dynamics.behaviors{	import com.sdg.collections.QuickList;	import com.sdg.sim.core.SimEntity;	import com.sdg.sim.dynamics.IBehavior;		import flash.events.Event;		public class BehaviorManager	{		private var _behaviorQueue:QuickList = new QuickList();		private var _currentBehavior:IBehavior;		private var _entity:SimEntity;		private var _isRunning:Boolean = false;				public function get currentBehavior():IBehavior		{			return _currentBehavior;		}				public function BehaviorManager(entity:SimEntity)		{			_entity = entity;		}				public function addBehavior(behavior:IBehavior):void		{			if (_currentBehavior == null)				enableBehavior(behavior);			else				_behaviorQueue.unshift(behavior);		}				public function removeBehavior(behavior:IBehavior):void		{			if (behavior == _currentBehavior)				enableNextBehavior();			else				_behaviorQueue.removeValue(behavior);		}				public function removeAllBehaviors():void		{			disableCurrentBehavior();			_behaviorQueue.length = 0;		}				public function start():void		{			if (!_isRunning)			{				_isRunning = true;				if (_currentBehavior) enableBehavior(_currentBehavior);			}		}				public function stop():void		{			if (_isRunning)			{				disableCurrentBehavior();				_isRunning = false;			}		}				public function get running():Boolean		{			return _isRunning && _currentBehavior && !_currentBehavior.isComplete;		}				private function disableCurrentBehavior():void		{			if (_currentBehavior)			{				_currentBehavior.removeEventListener(Event.COMPLETE, onBehaviorComplete);				_currentBehavior = null;				if (_isRunning) _entity.integrator = null;			}		}				private function enableBehavior(behavior:IBehavior):void		{			_currentBehavior = behavior;						if (_currentBehavior)				_currentBehavior.addEventListener(Event.COMPLETE, onBehaviorComplete);						if (_isRunning) _entity.integrator = _currentBehavior;		}				private function enableNextBehavior():void		{			if (_currentBehavior)				_currentBehavior.removeEventListener(Event.COMPLETE, onBehaviorComplete);						enableBehavior(_behaviorQueue.pop());		}				private function onBehaviorComplete(event:Event):void		{			enableNextBehavior();		}	}}