package com.sdg.sim{	import com.sdg.collections.QuickList;	import com.sdg.events.IntervalEvent;	import com.sdg.events.SimEvent;	import com.sdg.utils.EnterFrameTimer;	import com.sdg.sim.core.ISimulation;	import com.sdg.sim.core.SimEntity;	import flash.events.EventDispatcher;		public class SimEngine extends EventDispatcher	{		private var _frameTimer:EnterFrameTimer = new EnterFrameTimer();		private var _maxStepsPerFrame:int = 1;		private var _simulations:QuickList = new QuickList();		private var _timeStep:Number = 10;		private var _variableTimeStep:Boolean = true;				public function get isRunning():Boolean		{			return _frameTimer.isRunning;		}				public function get frameRate():Number		{			return _frameTimer.interval;		}				public function set frameRate(value:Number):void		{			_frameTimer.interval = value;		}				public function get maxStepsPerFrame():int		{			return _maxStepsPerFrame;		}				public function set maxStepsPerFrame(value:int):void		{			_maxStepsPerFrame = value;		}				public function get variableTimeStep():Boolean		{			return _variableTimeStep;		}				public function set variableTimeStep(value:Boolean):void		{			_variableTimeStep = value;		}				public function get timeStep():Number		{			return _timeStep;		}				public function set timeStep(value:Number):void		{			_timeStep = value;		}				public function SimEngine()		{			_frameTimer.addEventListener(IntervalEvent.INTERVAL, frameHandler, false, int.MAX_VALUE);		}				public function addSimulation(simulation:ISimulation):void		{			if (!_simulations.contains(simulation))				_simulations.push(simulation);		}				public function containsSimulation(simulation:ISimulation):Boolean		{			return _simulations.containsValue(simulation);		}				public function removeSimulation(simulation:ISimulation):void		{			_simulations.removeValue(simulation);		}				public function removeAllSimulations():void		{			_simulations.length = 0;		}				public function getSimulationContaining(entity:SimEntity):ISimulation		{			for each (var simulation:ISimulation in _simulations)			{				if (simulation.containsMember(entity)) return simulation;			}						return null;		}				public function start():void		{			if (!_frameTimer.isRunning)			{				_frameTimer.start();				dispatchEvent(new SimEvent(SimEvent.SIMULATION_START));			}		}				public function stop():void		{			if (_frameTimer.isRunning)			{				_frameTimer.stop();				dispatchEvent(new SimEvent(SimEvent.SIMULATION_STOP));			}		}				protected function frameHandler(event:IntervalEvent):void		{			var iterations:int = Math.ceil(event.elapsed / _timeStep);			if (iterations > _maxStepsPerFrame) iterations = _maxStepsPerFrame;						var dt:Number = (_variableTimeStep) ? event.elapsed / iterations : _timeStep;						// Update simulations.			var i:int = _simulations.length;						while (--i > -1)				_simulations[i].update(dt, iterations);						dispatchEvent(new SimEvent(SimEvent.SIMULATION_FRAME));		}	}}