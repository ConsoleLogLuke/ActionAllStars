package com.sdg.sim.entity{	import com.sdg.events.SimEvent;	import com.sdg.geom.GeomUtil;	import com.sdg.geom.Path;	import com.sdg.sim.dynamics.IBehavior;	import com.sdg.sim.dynamics.behaviors.BehaviorManager;	import com.sdg.sim.dynamics.behaviors.PathFollower;	import com.sdg.sim.map.IOccupancyMap;	import com.sdg.sim.map.TileMap;		import flash.events.Event;		public class TileMapEntity extends PolyEntity implements IMapOccupant	{		public static const SNAP_TO_GRID_FLAG:int = INVALIDATION_FLAG_A;		public static const PATH_FOLLOW_COMPLETE:String = 'path follow complete';				private static const NULL_OCCUPANCY_MAP:IOccupancyMap = new TileMap(1, 1);				private var _behaviorManager:BehaviorManager;		private var _extents:Array;		private var _map:IOccupancyMap = NULL_OCCUPANCY_MAP;		private var _solidity:Number = 0;				public function TileMapEntity(width:Number = 1, height:Number = 1, solidity:Number = 1)		{			_extents = [width * .5, height * .5];			_solidity = solidity;						addEventListener(SimEvent.ADDED, addedHandler);			addEventListener(SimEvent.REMOVED, removedHandler);			addEventListener(SimEvent.MOTION_ENABLED, motionEnabledHandler);		}				public function findPath(tx:Number, ty:Number):Path		{			return _map.findPath(this, tx, ty);		}				public function followPath(tx:Number, ty:Number, speed:Number = .015):Boolean		{			var path:Path = _map.findPath(this, tx, ty);			if (!path) return false;						var pathFollower:PathFollower;			if (behaviorManager.currentBehavior is PathFollower)			{				pathFollower = PathFollower(behaviorManager.currentBehavior);				pathFollower.speed = speed;				pathFollower.setPath(path);			}			else			{				pathFollower = new PathFollower(sdata, path, speed);				setBehavior(pathFollower);			}						// Listen for events on the path follower.			pathFollower.addEventListener(Event.COMPLETE, pathFollowerComplete);						return true;		}				public function stop():void		{			behaviorManager.stop();		}				public function snapToGrid():void		{			invalidate(SNAP_TO_GRID_FLAG);		}				public function validateOccupancy(x:Number = NaN, y:Number = NaN):Boolean		{			return _map.validateOccupancy(this, x, y);		}					public function validateTileOccupancy(col:int, row:int):Boolean		{			return _map.validateOccupancy(this, col + aabb.xMax, row + aabb.yMax);		}				protected function setBehavior(behavior:IBehavior):void		{			behaviorManager.removeAllBehaviors();			behaviorManager.addBehavior(behavior);			behaviorManager.start();		}				override protected function updateLocalAABB():void		{			if (((sdata.r / GeomUtil.RADIANS_90) & 1) == 0)			{				aabb.xMin = -_extents[0];				aabb.yMin = -_extents[1];				aabb.xMax = _extents[0];				aabb.yMax = _extents[1];			}			else			{				aabb.xMin = -_extents[1];				aabb.yMin = -_extents[0];				aabb.xMax = _extents[1];				aabb.yMax = _extents[0];			}		}				override protected function validate():void		{			super.validate();						if (sdata.flags & SNAP_TO_GRID_FLAG)			{				x = Math.round(sdata.x + aabb.xMin) + aabb.xMax;				y = Math.round(sdata.y + aabb.yMin) + aabb.yMax;			}						if ((sdata.flags & (AABB_RESIZED_FLAGS)) && !motionEnabled) 			{				_map.addOccupant(this);			}		}				////////////////////		// GET/SET METHODS		////////////////////				public function get col():int		{			return (sdata.x + aabb.xMin) >> 0;		}				public function set col(value:int):void		{			validateNow();			x = value + aabb.xMax;		}				public function get row():int		{			return (sdata.y + aabb.yMin) >> 0;		}				public function set row(value:int):void		{			validateNow();			y = value + aabb.yMax;		}				public function get solidity():Number		{			return _solidity;		}				public function set solidity(value:Number):void		{			_solidity = value;		}				public function get width():Number		{			return _extents[0] * 2;		}				public function set width(value:Number):void		{			_extents[0] = value * .5;			invalidate(RESIZED_FLAG);		}				public function get height():Number		{			return _extents[1] * 2;		}				public function set height(value:Number):void		{			_extents[1] = value * .5;			invalidate(RESIZED_FLAG);		}				protected function get behaviorManager():BehaviorManager		{			if (_behaviorManager == null)				_behaviorManager = new BehaviorManager(this);						return _behaviorManager;		}				public function get map():IOccupancyMap		{			return _map;		}				public function get behaviorRunning():Boolean		{			return behaviorManager.running;		}				////////////////////		// EVENT HANDLERS		////////////////////				protected function addedHandler(event:SimEvent):void		{			_map = simulation as IOccupancyMap;						if (_map == null)				_map = NULL_OCCUPANCY_MAP;			else				_map.addOccupant(this, sdata.x, sdata.y);		}				protected function removedHandler(event:SimEvent):void		{			behaviorManager.stop();			_map.removeOccupant(this);			_map = NULL_OCCUPANCY_MAP;		}				protected function motionEnabledHandler(event:SimEvent):void		{			_map.removeOccupant(this);		}				protected function pathFollowerComplete(e:Event):void		{			var pathFollower:PathFollower = PathFollower(e.currentTarget);			pathFollower.removeEventListener(Event.COMPLETE, pathFollowerComplete);			dispatchEvent(new Event(PATH_FOLLOW_COMPLETE));		}	}}