<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.sdg.components.dialog.ISdgDialog" width="446" height="380"
	backgroundImage="swfs/registration/bg_Registration.swf">
	<mx:Script>
		<![CDATA[
			import com.sdg.logging.LoggingUtil;
			import com.sdg.model.Buddy;
			import com.sdg.control.BuddyManager;
			import mx.events.FlexEvent;
			import mx.core.FlexGlobals; // Non-SDG - Application to FlexGlobals
			import com.sdg.net.socket.SocketClient;
			import com.sdg.ui.RoundCornerCloseButton;
			import mx.controls.Image;
			import com.sdg.model.ModelLocator;
			import com.sdg.events.RegistrationSaveEvent;
			import com.sdg.model.Avatar;
			import mx.controls.Text;
			import com.sdg.graphics.GradientStyle;
			import com.sdg.display.LineStyle;
			import com.sdg.graphics.RoundRectStyle;
			import com.sdg.components.controls.store.StoreNavBar;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.sdg.events.ValidateUsernameEvent;
			import com.sdg.utils.MainUtil;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;

			private var _saveButton:StoreNavBar;
			private var _avatar:Avatar = ModelLocator.getInstance().avatar;

			private var _closeBtn:RoundCornerCloseButton;

			[Embed(source="images/registration/unChecked.png")]
			public var checkBox_default:Class;
			[Embed(source="images/registration/checked.png")]
			public var checkBox_selected:Class;

			public function init(params:Object):void
			{
				FlexGlobals.topLevelApplication.stage.displayState = StageDisplayState.NORMAL;

				var i:int;

				var months:ArrayCollection = new ArrayCollection();
				for (i = 1; i <= 12; i++)
					months.addItem({label:zeroPad(i, 2), data:i-1});

				monthsComboBox.dataProvider = months;

				var days:ArrayCollection = new ArrayCollection();
				for (i = 1; i <= 31; i++)
					days.addItem({label:zeroPad(i, 2), data:i});

				daysComboBox.dataProvider = days;

				var years:ArrayCollection = new ArrayCollection();
				for (i = 2009; i >= 1900; i--)
					years.addItem({label:i, data:i});

				yearsComboBox.dataProvider = years;

				// Save button.
				_saveButton = new StoreNavBar(150, 30);
				_saveButton.roundRectStyle = new RoundRectStyle(10, 10);
				_saveButton.buttonMode = true;
				setDefaultSaveButton();
				saveButtonLabel = "Next";
				_saveButton.addEventListener(MouseEvent.CLICK, onNextClick, false, 0, true);
				_saveButton.addEventListener(MouseEvent.MOUSE_OVER, onSaveButtonMouseOver, false, 0, true);
				_saveButton.addEventListener(MouseEvent.MOUSE_OUT, onSaveButtonMouseOut, false, 0, true);
				//saveButtonEnabled = true;

				this.rawChildren.addChild(_saveButton);

				_saveButton.x = width/2 - _saveButton.width/2;
				_saveButton.y = height - _saveButton.height - 25;

				var referFriend:Buddy = ModelLocator.getInstance().referFriend;

				if (referFriend != null)
				{
					LoggingUtil.sendClickLogging(LoggingUtil.RAF_REGISTRATION_SCREEN_VIEW);
					titleLabel.text = "Activate your Account";
					titleLabel.x = 62;
					titleLabel.y = 12;
					lastStepLabel.visible = true;
				}
				else
				{
					// close button
					_closeBtn = new RoundCornerCloseButton();
					_closeBtn.x = width - _closeBtn.width - 15;
					_closeBtn.y = 14;
					_closeBtn.buttonMode = true;
					_closeBtn.addEventListener(MouseEvent.CLICK, onCloseClick, false, 0, true);
					rawChildren.addChild(_closeBtn);
				}
			}

			private function onCloseClick(event:MouseEvent):void
			{
				close();
			}

			private function set saveButtonLabel(buttonLabel:String):void
			{
				_saveButton.label = buttonLabel;
				_saveButton.labelX = _saveButton.width/2 - _saveButton.labelWidth/2;
			}

			private function setDefaultSaveButton():void
			{
				_saveButton.labelFormat = new TextFormat('EuroStyle', 22, 0x913300, true);
				_saveButton.borderStyle = new LineStyle(0x913300, 1, 1);

				var gradientBoxMatrix:Matrix = new Matrix();
				gradientBoxMatrix.createGradientBox(_saveButton.width, _saveButton.height, Math.PI/2, 0, 0);
				_saveButton.gradient = new GradientStyle(GradientType.LINEAR, [0xf8db5c, 0xd28602], [1, 1], [0, 255], gradientBoxMatrix);
			}

			private function setMouseOverSaveButton():void
			{
				_saveButton.labelFormat = new TextFormat('EuroStyle', 22, 0xffcc33, true);
				_saveButton.borderStyle = new LineStyle(0xff9900, 1, 1);

				var gradientBoxMatrix:Matrix = new Matrix();
				gradientBoxMatrix.createGradientBox(_saveButton.width, _saveButton.height, Math.PI/2, 0, 0);
				_saveButton.gradient = new GradientStyle(GradientType.LINEAR, [0xd18500, 0xa54c0a], [1, 1], [0, 255], gradientBoxMatrix);
			}

			private function onSaveButtonMouseOver(event:MouseEvent):void
			{
				setMouseOverSaveButton();
			}

			private function onSaveButtonMouseOut(event:MouseEvent):void
			{
				setDefaultSaveButton();
			}

			private function zeroPad(number:int, minLength:int):String
			{
				var paddedValue:String = number.toString();

				while(paddedValue.length < minLength)
					paddedValue = "0" + paddedValue;

				return paddedValue;
			}

			private function updateBirthday(birthdate:Date):void
			{
				var today:Date = new Date();
				var thirteenBDay:Date = new Date(birthdate.fullYear + 13, birthdate.month, birthdate.date);

				// if the thirteenth birthday is later than today, your under 13
				if (thirteenBDay > today)
				{
					emailText.text = "Enter Parent's Email";
					selectChatMode.includeInLayout = true;
					selectChatMode.visible = true;
					newsletterCheckBox.visible = newsletterCheckBox.selected = false;
				}
				else
				{
					emailText.text = "Enter Email";
					selectChatMode.includeInLayout = false;
					selectChatMode.visible = false;
					newsletterCheckBox.visible = newsletterCheckBox.selected = true;
				}
			}

			private function checkBirthday():Boolean
			{
				var success:Boolean = true;

				var selectedMonth:Object = monthsComboBox.selectedItem;
				var selectedDay:Object = daysComboBox.selectedItem;
				var selectedYear:Object = yearsComboBox.selectedItem;

				if (selectedMonth == null || selectedDay == null || selectedYear == null)
				{
					addError("Please select your birthday.");
					success = false;
				}

				return success;
			}

			private function checkName():Boolean
			{
				var success:Boolean = true;

				// check that username starts with a letter
				if (!checkTextStartsWithLetter(athleteName.text))
				{
					addError("Athlete name must start with a letter.");
					success = false;
				}
				// check that username has only letters and numbers
				else if (!checkTextCharacters(athleteName.text))
				{
					addError("Athlete name must contain only letters and numbers.");
					success = false;
				}
				// check that username is not less than 4 characters
				else if (!checkTextLength(athleteName.text, 4))
				{
					addError("Athlete name must be at least 4 characters.");
					success = false;
				}

				return success;
			}

			private function checkPassword():Boolean
			{
				var success:Boolean = true;

				// check that password is not less than 5 characters
				if (!checkTextLength(password.text, 5))
				{
					addError("Password should be at least 5 characters.");
					success = false;
				}
				// check that password has only letters and numbers
				else if (!checkTextCharacters(password.text))
				{
					addError("Password must contain only letters and numbers.");
					success = false;
				}
				// check that password is not same as username
				else if (checkMatchingFields(password.text, athleteName.text))
				{
					addError("Password can not be the same as Athlete name.");
					success = false;
				}
				// check that the password inputs match
				else if (!checkMatchingFields(password.text, password2.text))
				{
					addError("Passwords do not match.");
					success = false;
				}

				return success;
			}

			private function checkEmail():Boolean
			{
				var success:Boolean = true;

				// check that email is valid
				if (!checkValidEmail(email.text))
				{
					addError("Invalid email address.");
					success = false;
				}

				return success
			}

			private function checkTOS():Boolean
			{
				var success:Boolean = true;

				if (tosCheckBox.selected == false)
				{
					addError("You must agree to the Terms of Use in order to save your game.");
					success = false;
				}

				return success;
			}

			private	function onSaveClick(event:MouseEvent):void
			{
				_saveButton.removeEventListener(MouseEvent.CLICK, onSaveClick);

				email.enabled = false;
				tosCheckBox.enabled = false;
				newsletterCheckBox.enabled = false;
				if (_closeBtn != null)
					_closeBtn.mouseEnabled = false;

				saveButtonLabel = "Saving...";

				addEventListener("error", onPage2Error, false, 0, true);

				errorArea.visible = false;
				if (checkEmail() && checkTOS())
					createAvatar();
			}

			private function onNextClick(event:MouseEvent):void
			{
				_saveButton.removeEventListener(MouseEvent.CLICK, onNextClick);

				monthsComboBox.enabled = false;
				daysComboBox.enabled = false;
				yearsComboBox.enabled = false;
				athleteName.enabled = false;
				password.enabled = false;
				password2.enabled = false;
				if (_closeBtn != null)
					_closeBtn.mouseEnabled = false;

				saveButtonLabel = "Validating...";

				addEventListener("error", onPage1Error, false, 0, true);

				errorArea.visible = false;
				if (checkBirthday() && checkName() && checkPassword())
					validateName();
			}

			private function onPage1Error(event:Event):void
			{
				removeEventListener("error", onPage1Error);

				_saveButton.addEventListener(MouseEvent.CLICK, onNextClick, false, 0, true);

				monthsComboBox.enabled = true;
				daysComboBox.enabled = true;
				yearsComboBox.enabled = true;
				athleteName.enabled = true;
				password.enabled = true;
				password2.enabled = true;
				if (_closeBtn != null)
					_closeBtn.mouseEnabled = true;

				saveButtonLabel = "Next";
			}

			private function onPage2Error(event:Event):void
			{
				removeEventListener("error", onPage2Error);

				_saveButton.addEventListener(MouseEvent.CLICK, onSaveClick, false, 0, true);

				email.enabled = true;
				tosCheckBox.enabled = true;
				newsletterCheckBox.enabled = true;
				if (_closeBtn != null)
					_closeBtn.mouseEnabled = true;

				saveButtonLabel = "Save";
			}

			private function onRegistrationSaved(event:RegistrationSaveEvent):void
			{
				_avatar = ModelLocator.getInstance().avatar;

				if (event.status == 1 || event.status == 411)
				{
					_avatar.membershipStatus = 0;
					_avatar.name = "User" + _avatar.avatarId;

					var referFriend:Buddy = ModelLocator.getInstance().referFriend;
					if (referFriend != null)
					{
						LoggingUtil.sendClickLogging(LoggingUtil.RAF_REGISTERED_WITH_FRIEND);
						BuddyManager.makeBuddyRequest(referFriend.avatarId, referFriend.name, true);
					}

					SocketClient.getInstance().sendPluginMessage("avatar_handler", "uiEvent", { uiEvent:"<uiEvent><uiId>5</uiId><avUp>1</avUp></uiEvent>" });
					MainUtil.showDialog(WelcomeDialog, {name:athleteName.text, level:_avatar.levelName, giftName:event.giftName});

					close();
				}
				else if (event.status == 417)
				{
					addError("Email address has been banned.");
				}
				else
				{
					// failed
					addError("Error connecting to server. Please try again later.");
				}
			}

			private function createAvatar():void
			{
				CairngormEventDispatcher.getInstance().addEventListener(RegistrationSaveEvent.REGISTRATION_SAVED, onRegistrationSaved);
				var params:Object = {};
				params.userId = _avatar.userId;
				params.birthdate = yearsComboBox.selectedLabel + "" + monthsComboBox.selectedLabel + "" + daysComboBox.selectedLabel;
				params.userName = athleteName.text;
				params.password = password.text;
				params.parentEmail = email.text;
				params.chatmode = chatGroup.selectedValue;
				params.newsletterFlag = newsletterCheckBox.selected ? 1 : 0;

				var referFriend:Buddy = ModelLocator.getInstance().referFriend;
				if (referFriend != null)
					params.friendName = referFriend.name;

				dispatchEvent(new RegistrationSaveEvent(params));
			}

			private function onUsernameValidate(event:ValidateUsernameEvent):void
			{
				CairngormEventDispatcher.getInstance().removeEventListener(ValidateUsernameEvent.USERNAME_VALIDATED, onUsernameValidate);
				if (event.status == "available")
				{
					//createAvatar();
					goToPage2();
				}
				else if (event.status == "unvalidated" || event.status == "unacceptable")
				{
					addError("Username is " + event.status + ". Please try again.");
				}
				else
				{
					addError("Username is " + event.status +
						".\nHow about this one? <FONT color='#cccccc' size='+2'><u>" +
						event.suggestion.toUpperCase() + "</u></FONT>");
				}
			}

			private function goToPage2():void
			{
				var selectedMonth:Object = monthsComboBox.selectedItem;
				var selectedDay:Object = daysComboBox.selectedItem;
				var selectedYear:Object = yearsComboBox.selectedItem;

				if (selectedMonth != null && selectedDay != null && selectedYear != null)
					updateBirthday(new Date(selectedYear.data, selectedMonth.data, selectedDay.data));

				page1.visible = false;
				page2.visible = true;
				removeEventListener("error", onPage1Error);

				saveButtonLabel = "Save";
				_saveButton.addEventListener(MouseEvent.CLICK, onSaveClick, false, 0, true);

				if (_closeBtn != null)
					_closeBtn.mouseEnabled = true;
			}

			private function addError(message:String):void
			{
				errorText.htmlText = message;
				errorArea.visible = true;

				dispatchEvent(new Event("error"));
			}

			private function validateName():void
			{
				CairngormEventDispatcher.getInstance().addEventListener(ValidateUsernameEvent.USERNAME_VALIDATED, onUsernameValidate);
				dispatchEvent(new ValidateUsernameEvent(athleteName.text));
			}

			private function checkTextLength(input:String, minLength:int):Boolean
			{
				return input.length >= minLength;
			}

			private function checkTextCharacters(input:String):Boolean
			{
				var pattern:RegExp = /^[a-zA-Z0-9]+$/;

				if (!pattern.test(input))
					return false;

				return true;
			}

			private function checkTextStartsWithLetter(input:String):Boolean
			{
				var pattern:RegExp = /^[a-zA-Z]/;

				if (!pattern.test(input))
					return false;

				return true;
			}

			private function checkMatchingFields(input1:String, input2:String):Boolean
			{
				if (input1 != input2)
					return false;

				return true;
			}

			private function checkValidEmail(input:String):Boolean
			{
				// verify the email syntax with a regular expression
				// got this regular expression from http://www.webdeveloper.com/forum/archive/index.php/t-9970.html
				var pattern:RegExp = /^[^\x00-\x20()<>@,;:\\".[\]\x7f-\xff]+(?:\.[^\x00-\x20()<>@,;:\\".[\]\x7f-\xff]+)*\@[^\x00-\x20()<>@,;:\\".[\]\x7f-\xff]+(?:\.[^\x00-\x20()<>@,;:\\".[\]\x7f-\xff]+)+$/i;
				if (!pattern.test(input))
					return false;

				return true;
			}

			private function openChatTypeInfo():void
			{
				var array:ArrayCollection = new ArrayCollection();
				array.addItem({header:"Open Chat", body:"Open Chat allows Athletes to type messages" +
						" to other users. Each message is filtered prior to being transmitted to" +
						" allow for pre-approved words and phrases to be used, and to block" +
						" attempts to send non-approved words, phrases, phone numbers, or other" +
						" personal information."});
				array.addItem({header:"Safe Chat Plus", body:"Safe Chat Plus restricts what Athletes can say to each" +
						" other by using a predefined set of choices, including: general statements," +
						" greetings, and questions.  When it comes to conversations, these users can" +
						" only view messages sent by other Safe Chat Plus users."});
				var dialog:ISdgDialog = MainUtil.showDialog(WhatIsThisDialog, array, false, true);
			}

			public function close():void
			{
				if (_closeBtn != null)
					_closeBtn.removeEventListener(MouseEvent.CLICK, onCloseClick);

				_saveButton.removeEventListener(MouseEvent.CLICK, arguments.callee);
				_saveButton.removeEventListener(MouseEvent.MOUSE_OVER, onSaveButtonMouseOver);
				_saveButton.removeEventListener(MouseEvent.MOUSE_OUT, onSaveButtonMouseOut);

				PopUpManager.removePopUp(this);
			}

			private function viewTOS():void
			{
				if (ExternalInterface.available)
					ExternalInterface.call("window.open('termsTextPopup.jsp?','Terms','height='+250+',width='+250+',top='+25+',left='+25+',scrollbars=1,location=0,resizable=0')");
			}
		]]>
	</mx:Script>
	<mx:Style>
		Combo.dropdown
		{
			color: #666666;
		}
	</mx:Style>
	<mx:Label id="titleLabel" fontSize="26" fontFamily="EuroStyle" fontWeight="bold" color="#ffffff"
		text="Create a Free Account" filters="{[new GlowFilter(0x00CCFF)]}" x="62" y="20"/>
	<mx:Label id="lastStepLabel" fontSize="14" fontFamily="EuroStyle" fontWeight="bold" color="#dddddd"
		text="Last step to claim your free prize!" x="60" y="42" visible="false"/>
	<mx:VBox id="page1" verticalGap="10" horizontalCenter="0" y="75">
		<mx:Canvas>
			<mx:Label text="Enter Your Birthday" paddingTop="0" paddingBottom="0" fontSize="14" fontFamily="EuroStyle" fontWeight="bold"/>
			<mx:HBox y="22">
				<mx:ComboBox id="monthsComboBox" prompt="mm" color="#666666" fillColors="[0xffffff, 0xffffff]"
					paddingLeft="0" paddingRight="0" width="77" height="26" fontSize="14" fontFamily="EuroStyle" fontWeight="bold"
					textAlign="center" borderColor="#999999" iconColor="#999999" dropdownStyleName="dropdown"/>
				<mx:ComboBox id="daysComboBox" prompt="dd" color="#666666" fillColors="[0xffffff, 0xffffff]"
					paddingLeft="0" paddingRight="0" width="77" height="26" fontSize="14" fontFamily="EuroStyle" fontWeight="bold"
					textAlign="center" borderColor="#999999" iconColor="#999999" dropdownStyleName="dropdown"/>
				<mx:ComboBox id="yearsComboBox" prompt="yyyy" color="#666666" fillColors="[0xffffff, 0xffffff]"
					paddingLeft="0" paddingRight="0" width="77" height="26" fontSize="14" fontFamily="EuroStyle" fontWeight="bold"
					textAlign="center" borderColor="#999999" iconColor="#999999" dropdownStyleName="dropdown"/>
			</mx:HBox>
		</mx:Canvas>

		<mx:Canvas>
			<mx:Label text="Name Your Athlete" paddingTop="0" paddingBottom="0" fontSize="14" fontFamily="EuroStyle" fontWeight="bold"/>
			<mx:TextInput id="athleteName" borderStyle="solid" borderThickness="2" borderColor="#999999"
				fontSize="15" fontFamily="EuroStyle" fontWeight="bold" y="21"
				paddingTop="0" paddingBottom="0" cornerRadius="0" width="330" maxChars="13"/>
		</mx:Canvas>

		<mx:Canvas>
			<mx:Label text="Create a Password" paddingTop="0" paddingBottom="0" fontSize="14" fontFamily="EuroStyle" fontWeight="bold"/>
			<mx:TextInput id="password" borderStyle="solid" borderThickness="2" borderColor="#999999"
				fontSize="15" fontFamily="EuroStyle" fontWeight="bold" y="21"
				paddingTop="0" paddingBottom="0" cornerRadius="0" width="330" displayAsPassword="true" maxChars="10"/>
		</mx:Canvas>

		<mx:Canvas>
			<mx:Label text="Confirm Password" paddingTop="0" paddingBottom="0" fontSize="14" fontFamily="EuroStyle" fontWeight="bold"/>
			<mx:TextInput id="password2" borderStyle="solid" borderThickness="2" borderColor="#999999"
				fontSize="15" fontFamily="EuroStyle" fontWeight="bold" y="21"
				paddingTop="0" paddingBottom="0" cornerRadius="0" width="330" displayAsPassword="true" maxChars="10"/>
		</mx:Canvas>
	</mx:VBox>

	<mx:VBox id="page2" verticalGap="10" horizontalCenter="0" y="75" visible="false">
		<mx:Canvas>
			<mx:Label id="emailText" text="Enter Email" paddingTop="0" paddingBottom="0" fontSize="14" fontFamily="EuroStyle" fontWeight="bold"/>
			<mx:TextInput id="email" borderStyle="solid" borderThickness="2" borderColor="#999999"
				fontSize="15" fontFamily="EuroStyle" fontWeight="bold" y="21"
				paddingTop="0" paddingBottom="0" cornerRadius="0" width="330"/>
		</mx:Canvas>

		<mx:Canvas width="330" height="70" id="selectChatMode" visible="false" includeInLayout="false" backgroundColor="0x062d3f"
			borderStyle="solid" borderColor="0x666666" borderThickness="1">
			<mx:RadioButtonGroup id="chatGroup"/>

			<mx:Label text="Select Chat Type" paddingTop="0" paddingBottom="0" x="10" y="10"
				fontSize="13" fontFamily="EuroStyle" fontWeight="bold"/>

			<mx:Label text="Chat" paddingTop="0" paddingBottom="0" horizontalCenter="0" y="10"
				fontSize="13" fontFamily="EuroStyle" fontWeight="bold" color="0x567b8b"/>

			<mx:RadioButton paddingTop="0" paddingBottom="0" groupName="chatGroup" selected="true" value="{Avatar.SAFE_CHAT}"
				icon="{checkBox_default}" selectedUpIcon="{checkBox_selected}" selectedOverIcon="{checkBox_selected}"
				horizontalCenter="3" y="33"/>

			<mx:Label text="Safe Chat Plus" paddingTop="0" paddingBottom="0" horizontalCenter="85" y="10"
				fontSize="13" fontFamily="EuroStyle" fontWeight="bold" color="0x567b8b"/>

			<mx:RadioButton paddingTop="0" paddingBottom="0" groupName="chatGroup" value="{Avatar.ULTRA_SAFE_CHAT}"
				icon="{checkBox_default}" selectedUpIcon="{checkBox_selected}" selectedOverIcon="{checkBox_selected}"
				horizontalCenter="88" y="33"/>

			<mx:Label text="What is this?" x="10" y="33" paddingTop="0" paddingBottom="0" textDecoration="underline" buttonMode="true"
				mouseChildren="false" fontSize="11" fontFamily="EuroStyle" fontWeight="bold" color="0x666666" click="openChatTypeInfo()"/>
		</mx:Canvas>

		<mx:Canvas>
			<mx:HBox verticalAlign="middle" horizontalGap="0" paddingTop="0" paddingBottom="0">
				<mx:CheckBox id="tosCheckBox" label="I agree to the" textSelectedColor="#ffffff"
					fontSize="12" fontFamily="EuroStyle"
					icon="{checkBox_default}" selectedUpIcon="{checkBox_selected}" selectedOverIcon="{checkBox_selected}"/>
				<mx:Label id="termsOfUse" text="Terms of Use" textDecoration="underline" buttonMode="true" mouseChildren="false"
					mouseOut="{termsOfUse.setStyle('textDecoration', 'underline')}" mouseOver="{termsOfUse.setStyle('textDecoration', 'none')}"
					color="#fff000" fontSize="12" fontFamily="EuroStyle" fontWeight="bold" click="viewTOS()"/>
			</mx:HBox>

			<mx:CheckBox id="newsletterCheckBox" label="Yes, please send me the Action AllStars newsletter!" textSelectedColor="#ffffff"
				icon="{checkBox_default}" selectedUpIcon="{checkBox_selected}" selectedOverIcon="{checkBox_selected}" y="40"
				paddingTop="0" paddingBottom="0" fontSize="12" fontFamily="EuroStyle"/>
		</mx:Canvas>
	</mx:VBox>

	<mx:HBox id="errorArea" backgroundColor="0x9c2a42" visible="false" width="330" horizontalCenter="0" y="20"
		borderColor="#820b1e" borderStyle="solid" borderThickness="2" cornerRadius="5"
		paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" verticalAlign="middle">
		<mx:Image source="swfs/registration/exclamationPoint.swf" verticalAlign="middle"/>
		<mx:Text id="errorText" fontSize="13" fontFamily="EuroStyle" fontWeight="bold" textAlign="left" selectable="false" width="278" color="0xffffff"
			paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"/>
	</mx:HBox>
</mx:Canvas>
