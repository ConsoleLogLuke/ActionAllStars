package com.sdg.animation{	import com.sdg.animation.sequence.FrameSequencer;	import com.sdg.animation.sequence.ISequence;	import com.sdg.collections.QuickList;	import com.sdg.display.ISpriteRenderer;	import com.sdg.events.AnimationFrameEvent;	    public class AnimationSetPlayer extends FrameSequencer	{		private var _currentResource:AnimationSetResource;		private var _currentAnimation:String;		private var _resources:QuickList = new QuickList();		private var _spriteRenderers:QuickList = new QuickList();				public function get currentAnimation():String		{			return _currentAnimation;		}				public function set currentAnimation(value:String):void		{			if (value != _currentAnimation) setAnimation(value);		}				public function AnimationSetPlayer()		{			addEventListener(AnimationFrameEvent.SPRITE, renderSpriteFrame);		}				public function addResource(resource:AnimationSetResource):void		{			_resources.push(resource);			if (_currentAnimation) setAnimation(_currentAnimation);		}				public function addResourceList(list:Array):void		{			for each (var resource:AnimationSetResource in list)			{				_resources.push(resource);			}						if (_currentAnimation) setAnimation(_currentAnimation);		}				public function removeResource(index:int):void		{			if (_resources[index] == _currentResource)				_currentResource = null;							_resources.remove(index);		}				public function removeAllResources():void		{			_currentResource = null;			for (var i:int = _resources.length - 1; i >= 0; i--)				_resources.remove(i);			_resources.length = 0;		}				public function addSpriteRenderer(renderer:ISpriteRenderer):void		{			if (!_spriteRenderers.contains(renderer))			{				updateSpriteRenderer(_spriteRenderers.push(renderer) - 1);			}		}				public function removeSpriteRenderer(renderer:ISpriteRenderer):void		{			_spriteRenderers.removeValue(renderer);		}				public function playAnimation(name:String):Boolean		{			reset();			play();			return setAnimation(name);		}				public function setAnimation(name:String):Boolean		{			_currentAnimation = name;						for each (var resource:AnimationSetResource in _resources)			{				var sequence:ISequence = resource.getSequence(name);								if (sequence)				{					this.sequence = sequence;										if (resource != _currentResource)					{						_currentResource = resource;						updateSpriteRenderers();					}										return true;				}			}						return false;		}				protected function updateSpriteRenderers():void		{			var i:int = _spriteRenderers.length;			while (--i > -1) updateSpriteRenderer(i);		}				protected function updateSpriteRenderer(index:uint):void		{			if (!_currentResource) return;			_spriteRenderers[index].spriteSheet = _currentResource.getSpriteSheet(index);		}				protected function renderSpriteFrame(event:AnimationFrameEvent):void		{			var i:int = _spriteRenderers.length;						while (--i > -1)				_spriteRenderers[i].renderSprite(int(event.data));		}    }}