package com.sdg.animation{	import com.sdg.core.IntervalManager;	import com.sdg.core.IntervalType;	import com.sdg.events.IntervalEvent;	import com.sdg.events.SDGAnimationEvent;	import flash.errors.IllegalOperationError;	import flash.events.EventDispatcher;	import flash.utils.getTimer;		[Event(name="animationComplete", type="com.sdg.events.SDGAnimationEvent")]	[Event(name="animationStart", type="com.sdg.events.SDGAnimationEvent")]	[Event(name="animationStop", type="com.sdg.events.SDGAnimationEvent")]		public class AbstractAnimator extends EventDispatcher	{		private var _intervalListener:Function;		private var _isPlaying:Boolean;		private var _loopCount:int = 0;		private var _loopCounter:int = 0;		private var _interval:Number;		private var _intervalType:uint = IntervalType.ENTER_FRAME;				public function get delay():Number		{			return (_intervalType == IntervalType.SET_INTERVAL) ? _interval : 1000 / _interval;		}			public function set delay(value:Number):void		{			interval = (_intervalType == IntervalType.ENTER_FRAME) ? 1000 / value : value;		}			public function get frameRate():Number		{			return (_intervalType == IntervalType.ENTER_FRAME) ? _interval : 1000 / _interval;		}			public function set frameRate(value:Number):void		{			interval = (_intervalType == IntervalType.SET_INTERVAL) ? 1000 / value : value;		}			public function get loopCount():uint		{			return _loopCount;		}			public function set loopCount(value:uint):void		{			_loopCount = value;		}		public function get isPlaying():Boolean		{			return _isPlaying;		}				public function get interval():Number		{			return _interval;		}				public function set interval(value:Number):void		{			if (value != _interval)			{				_interval = value;				resetTimerAttributes();			}		}				public function get intervalType():uint		{			return _intervalType;		}			public function set intervalType(value:uint):void		{			if (value != _intervalType)			{				_intervalType = value;				resetTimerAttributes();			}		}			public function AbstractAnimator(intervalListener:Function = null, intervalType:uint = 0)		{			_intervalListener = intervalListener;			_intervalType = intervalType;		}				public function play():void		{			if (!_isPlaying)			{				if (_intervalListener == null)					throw new IllegalOperationError("Cannot start playback. No intervalListener exists.");							_isPlaying = true;							addIntervalListener(_intervalListener);				dispatchEvent(new SDGAnimationEvent('animationStart'));			}		}				public function reset():void		{			_loopCounter = 0;		}				public function stop():void		{			if (_isPlaying)			{				_isPlaying = false;							removeIntervalListener(_intervalListener);				dispatchEvent(new SDGAnimationEvent('animationStop'));			}		}				protected function setLoopComplete():Boolean		{			if (_loopCount < 1 || ++_loopCounter < _loopCount)				return true;			else				return false;		}				protected function setAnimationComplete():void		{			_loopCounter = 0;			this.stop();			dispatchEvent(new SDGAnimationEvent('animationComplete'));		}				protected function addIntervalListener(listener:Function):void		{			IntervalManager.addIntervalListener(listener, _intervalType, _interval);		}			protected function removeIntervalListener(listener:Function):void		{			IntervalManager.removeIntervalListener(listener);		}				protected function setIntervalListener(listener:Function):void		{			if (_isPlaying)			{				removeIntervalListener(_intervalListener);				addIntervalListener(listener);			}					_intervalListener = listener;		}				private function resetTimerAttributes():void		{			if (_isPlaying)			{				removeIntervalListener(_intervalListener);				addIntervalListener(_intervalListener);			}		}	}}