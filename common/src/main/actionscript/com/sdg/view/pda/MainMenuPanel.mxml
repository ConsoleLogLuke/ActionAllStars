<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="316" height="400" implements="com.sdg.view.pda.interfaces.IPDAMainPanel" xmlns:pda="com.sdg.view.pda.*">
	<mx:Script>
		<![CDATA[
			import com.sdg.model.Avatar;
			import com.sdg.model.ModelLocator;
			import com.sdg.control.ReferAFriendController;
			import com.boostworthy.animation.rendering.RenderMethod;
			import com.boostworthy.animation.management.AnimationManager;
			import com.sdg.view.pda.interfaces.IPDAMainPanel;
			import com.sdg.control.PDAController;
			import com.sdg.view.pda.interfaces.IPDASidePanel;
			import com.sdg.logging.LoggingUtil;

			public static const MISSIONS_BUTTON_ID:String = 'missionButton';

			[Bindable]
			private var _controller:PDAController;
			private var _isInitialized:Boolean = false;

			private var _animManager:AnimationManager;

			////////////////////
			// PUBLIC METHODS
			////////////////////

			public function init(controller:PDAController = null):void
			{
				this.controller = controller;

				_animManager = new AnimationManager();

				_isInitialized = true;
			}

			public function refresh():void
			{
			}

			public function close():void
			{
			}

			public function startButtonHighlight(buttonId:String):void
			{
				var button:MainMenuButton = this[buttonId] as MainMenuButton;
				if (button != null)
				{
					_animManager.pulse(button, 'greenMultiply', 1, 5, 1000, RenderMethod.ENTER_FRAME);
					_animManager.pulse(button, 'scaleX', 1, 1.2, 1000, RenderMethod.ENTER_FRAME);
					_animManager.pulse(button, 'scaleY', 1, 1.2, 1000, RenderMethod.ENTER_FRAME);
				}
			}

			public function stopButtonHighlight(buttonId:String):void
			{
				var button:MainMenuButton = this[buttonId] as MainMenuButton;
				if (button != null)
				{
					_animManager.remove(button);
					button.greenMultiply = 1;
					button.scaleX = button.scaleY = 1;
				}
			}

			public function doButtonHighlight(buttonId:String, duration:uint):void
			{
				var timer:Timer = new Timer(duration);
				timer.addEventListener(TimerEvent.TIMER, onTimer);

				startButtonHighlight(buttonId);

				timer.start();

				function onTimer(e:TimerEvent):void
				{
					timer.removeEventListener(TimerEvent.TIMER, onTimer);
					timer.reset();
					timer = null;
					stopButtonHighlight(buttonId);
				}
			}

			public function getButtonRect(buttonId:String):Rectangle
			{
				// Return the bounds of a button within this coordinate space.

				var button:MainMenuButton = this[buttonId] as MainMenuButton;
				if (button == null) return null;

				return button.getBounds(this);
			}

			////////////////////
			// PRIVATE METHODS
			////////////////////

			private function openCustomizer():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_CUSTOMIZER_BUTTON);
				_controller.openCustomizer();
			}

			private function openGamesPanel():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_GAMES_BUTTON);

				_controller.openGamesPanel();
			}

			private function openMissionsPanel():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_MISSIONS_BUTTON);

				_controller.openQuestsPanel();
			}

			private function openPickemPanel():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_SPORTS_PSYCHIC_BUTTON);

				_controller.openPickemPanel();
			}

			private function openMessagesPanel():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_MESSAGES_BUTTON);

				_controller.openMessagesPanel();
			}

			private function openMyStatsPanel():void
			{
				if (_controller == null) return;

				_controller.openMyStatsPanel();
			}

			private function openQuestsPanel():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_MISSIONS_BUTTON);

				_controller.openQuestsPanel();
			}

			private function openFeedbackPanel():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_COMMENTS_BUTTON);

				_controller.openFeedbackPanel();
			}

			private function referFriend():void
			{
				// Get Avatar
				var av:Avatar = ModelLocator.getInstance().avatar;

				// Launch Refer A Friend
				var referControl:ReferAFriendController = new ReferAFriendController();
				referControl.refer(av,0);
			}

			private function openStore():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_CATALOG_BUTTON);

				_controller.openStore();
			}

			private function openLeaderboard():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_LEADERBOARDS_BUTTON);

				_controller.openLeaderboard();
			}

			private function openBuddyList():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_FRIENDS_BUTTON);

				_controller.showFriendsList();
			}


			private function showCardAlbum():void
			{
				if (_controller == null) return;

				_controller.showCardAlbum();
			}

			private function showBadgeList():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_AWARDS_BUTTON);

				_controller.showBadgeList();
			}

			private function showNews():void
			{
				if (_controller == null) return;
				LoggingUtil.sendClickLogging(LoggingUtil.PDA_ASN_BUTTON);

				_controller.showNews();
			}

			////////////////////
			// GET/SET METHODS
			////////////////////

			public function set controller(value:PDAController):void
			{
				_controller = value;
			}

			public function get isInitialized():Boolean
			{
				return _isInitialized;
			}

			public function get sidePanel():IPDASidePanel
			{
				return null;
			}

			public function get panelName():String
			{
				return "Main Menu";
			}
		]]>
	</mx:Script>
	<mx:TileList id="menuButtons" bottom="0" maxColumns="3" maxRows="4" backgroundAlpha="0"
		width="{menuButtons.columnWidth * menuButtons.maxColumns}" height="400"
		rowHeight="100" columnWidth="105" horizontalCenter="0" borderStyle="none"
		horizontalScrollPolicy="off" verticalScrollPolicy="off" selectable="false"
		itemRenderer="com.sdg.components.renderers.PDAMainMenuRenderer">
		<mx:dataProvider>
			<mx:Array>
				<pda:MainMenuButton iconSource="swfs/pda/referFriend.swf" click="referFriend()" labelText="Invite A Friend"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/catalogIcon.swf" click="openStore()" labelText="Catalog"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/customizerIcon.swf" click="openCustomizer()" labelText="Customizer"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton id="messagesButton" iconSource="swfs/pda/messagesIcon.swf" click="openMessagesPanel()" labelText="Notifications"
					glowTrigger="{_controller.hudcontroller.hasNewMessages}"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/PDALeaderboard.swf" click="openLeaderboard()" labelText="Leaderboards"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/missionIcon.swf" click="openMissionsPanel()" labelText="Missions"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false" id="missionButton"/>
				<pda:MainMenuButton iconSource="swfs/pda/PDABuddyList.swf" click="openBuddyList()" labelText="Friends &amp; Parties"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/asnIcon.swf" click="showNews()" labelText="Action Sports News"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/awardsIcon.swf" click="showBadgeList()" labelText="Badges"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/pickemIcon.swf" click="openPickemPanel()" labelText="Sports Psychic"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/gamesIcon.swf" click="openGamesPanel()" labelText="Games"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<pda:MainMenuButton iconSource="swfs/pda/feedbackIcon.swf" click="openFeedbackPanel()" labelText="Comments"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}" showButton="false"/>
				<!--<pda:MainMenuButton iconSource="swfs/pda/myStatsIcon.swf" click="openMyStatsPanel()" labelText="My Stats"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}"/>-->
				<!--<pda:MainMenuButton iconSource="swfs/pda/cardAlbumIcon.swf" click="showCardAlbum()" labelText="Card Album"
					mouseOverSound="{_controller.mouseOverSound}" clickSound="{_controller.clickSound}"/>-->
			</mx:Array>
		</mx:dataProvider>
	</mx:TileList>
</mx:Canvas>
