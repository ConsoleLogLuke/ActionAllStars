package com.sdg.geom{	import com.sdg.geom.Path;	import com.sdg.geom.IShapeCursor;		public class PathCursor implements IShapeCursor	{		private static const SEG_COORDS:Array = Path.SEG_COORDS;				protected var _path:Path;		protected var _segIndex:int = 0;		protected var _coordIndex:int = 0;				public function get currentIndex():int		{			return _segIndex;		}				public function PathCursor(path:Path)		{			_path = path;		}				public function currentSegment(coords:Array):int		{			var type:int = _path.types[_segIndex];			var i:int = SEG_COORDS[type];						while (i > 0) coords[--i] = _path.coords[_coordIndex + i];						return type;		}				public function hasNext():Boolean		{			return _segIndex < _path.segIndex;		}				public function hasPrev():Boolean		{			return _segIndex > 0;		}				public function next():void		{			_coordIndex += SEG_COORDS[ int(_path.types[++_segIndex]) ];		}				public function prev():void		{			_coordIndex -= SEG_COORDS[ int(_path.types[--_segIndex]) ];		}				public function reset():void		{			_segIndex = _coordIndex = 0;		}				public function seek(index:uint):void		{			if (index <= _path.segIndex)			{				_segIndex = index;				_coordIndex = getCoordIndex(index);			}		}				protected function getCoordIndex(index:uint):uint		{			var si:int = -1;			var ci:int = 0;			var l:int = Math.min(index, _segIndex);						while (++si < l) ci += SEG_COORDS[_path.types[si]];						return ci;		}	}}