package com.sdg.geom{	import flash.display.BitmapData;	import flash.geom.Point;		public class BresenhamInterpolator	{		public static function setPixels(bitmap:BitmapData, color:Number, x1:int, y1:int, x2:int, y2:int):void		{			interpolate(x1, y1, x2, y2, bitmap.setPixel, color);		}				public static function setPixels32(bitmap:BitmapData, color:Number, x1:int, y1:int, x2:int, y2:int):void		{			interpolate(x1, y1, x2, y2, bitmap.setPixel32, color);		}				public static function getPoints(x1:int, y1:int, x2:int, y2:int):Array		{			var points:Array = [];						var plot:Function = function(x:int, y:int):void			{				points.push(new Point(x, y));			}						interpolate(x1, y1, x2, y2, plot);						return points;		}				private static function interpolate(x1:int, y1:int, x2:int, y2:int, plot:Function, color:Number = 0):void		{			var error:int;			var dx:int = x2 - x1, dy:int = y2 - y1, yi:int = 1;						if (dx < dy)			{				// swap				x1 ^= x2, x2 ^= x1, x1 ^= x2;				y1 ^= y2, y2 ^= y1, y1 ^= y2;			}						if (dx < 0) dx = ~dx + 1, yi = ~yi + 1;			if (dy < 0) dy = ~dy + 1, yi = ~yi + 1;						if (dy > dx)			{					error = -(dy >> 1);								while (y2 < y1)				{					plot(x2, y2, color);					error += dx;										if (error > 0) x2 += yi, error -= dy;										y2++;				}			}			else			{				error = -(dx >> 1);								while (x1 < x2)				{					plot(x1, y1, color);					error += dy;										if (error > 0) y1 += yi, error -= dx;										x1++;				}			}		}	}}