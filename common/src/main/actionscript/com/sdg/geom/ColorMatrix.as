package com.sdg.geom{	import com.boostworthy.geom.ColorMatrix;		public class ColorMatrix extends com.boostworthy.geom.ColorMatrix	{		private var _tintColor:int;		private var _tintAmount:Number;				public function get tintColor():int		{			return _tintColor;		}				public function set tintColor(value:int):void		{			if (!isNaN(_tintAmount))				colorize(_tintColor, _tintAmount);		}				public function get tintAmount():Number		{			return _tintAmount;		}				public function set tintAmount(value:Number):void		{			_tintAmount = value;			colorize(_tintColor, _tintAmount);		}				/**		 * Constructor.		 */		public function ColorMatrix(matrix:Array = null)		{			super(matrix);		}				public function colorize(color:int, amount:Number = 1):void        {            var r:Number = (((color >> 16) & 0xFF) / 0xFF);            var g:Number = (((color >> 8) & 0xFF) / 0xFF);            var b:Number = ((color & 0xFF) / 0xFF);            var invAmount:Number = 1 - amount;                        multiply([invAmount + LUMINANCE_R * amount * r, LUMINANCE_G * amount * r, LUMINANCE_B * amount * r, 0, 0,            			  LUMINANCE_R * amount * g, invAmount + LUMINANCE_G * amount * g, LUMINANCE_B * amount * g, 0, 0,             		  LUMINANCE_R * amount * b, LUMINANCE_G * amount * b, invAmount + LUMINANCE_B * amount * b, 0, 0,             		  0, 0, 0, 1, 0]);        }                override public function clone():com.boostworthy.geom.ColorMatrix        {        	return new com.sdg.geom.ColorMatrix();        }				//--------------------------------------------------------------------------		//		//  Static factory methods		//		//--------------------------------------------------------------------------				public static function tint(color:int, amount:Number = 1, alpha:Number = 1):Array		{				var mtx:com.sdg.geom.ColorMatrix = new com.sdg.geom.ColorMatrix();			mtx.colorize(color, amount);			if (alpha != 1) mtx.alpha = alpha;			return mtx.valueOf();		}	}}